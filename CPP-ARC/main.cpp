/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "include/cpp-arc.h"

/*******************************************************************************
 * CPP ARC namespace
 ******************************************************************************/

#pragma mark -
#pragma mark CPP ARC namespace

namespace CPPARC
{
    typedef struct _AllocInfos
    {
        std::size_t retainCount;
        std::size_t allocSize;
    }
    AllocInfos;
    
    void * allocate( std::size_t size );
    void * allocate( std::size_t size )
    {
        std::size_t   allocSize;
        char        * mem;
        AllocInfos  * infos;
        
        allocSize   = size + sizeof( AllocInfos );
        mem         = reinterpret_cast< char * >( malloc( allocSize ) );
        
        if( mem == NULL )
        {
            return NULL;
        }
        
        infos               = reinterpret_cast< AllocInfos * >( mem );
        infos->retainCount  = 1;
        infos->allocSize    = size;
        
        return reinterpret_cast< void * >( mem + sizeof( AllocInfos ) );
    }
    
    void deallocate( void * p );
    void deallocate( void * p )
    {
        char        * mem;
        AllocInfos  * infos;
        
        if( p == NULL )
        {
            return;
        }
        
        mem     = reinterpret_cast< char * >( p );
        mem    -= sizeof( AllocInfos );
        infos   = reinterpret_cast< AllocInfos * >( mem );
        
        if( infos->retainCount > 0 )
        {
            std::cerr << "Warning: deallocating an object with a retain count greater than zero!" << std::endl;
            
            exit( EXIT_FAILURE );
        }
        
        free( mem );
    }
    
    template< typename T > void release( T * p );
    template< typename T > void release( T * p )
    {
        char        * mem;
        AllocInfos  * infos;
        
        if( p == NULL )
        {
            return;
        }
        
        mem     = reinterpret_cast< char * >( p );
        mem    -= sizeof( AllocInfos );
        infos   = reinterpret_cast< AllocInfos * >( mem );
        
        infos->retainCount--;
        
        if( infos->retainCount == 0 )
        {
            delete p;
        }
    }

    template< typename T > T * retain( T * p );
    template< typename T > T * retain( T * p )
    {
        char        * mem;
        AllocInfos  * infos;
        
        if( p == NULL )
        {
            return NULL;
        }
        
        mem     = reinterpret_cast< char * >( p );
        mem    -= sizeof( AllocInfos );
        infos   = reinterpret_cast< AllocInfos * >( mem );
        
        infos->retainCount++;
        
        return p;
    }

    std::size_t getRetainCount( void * p );
    std::size_t getRetainCount( void * p )
    {
        char        * mem;
        AllocInfos  * infos;
        
        if( p == NULL )
        {
            return 0;
        }
        
        mem     = reinterpret_cast< char * >( p );
        mem    -= sizeof( AllocInfos );
        infos   = reinterpret_cast< AllocInfos * >( mem );
        
        return infos->retainCount;
    }
    
    template < typename T > class AutoPointer
    {
        public:
            
            class Exception
            {
                public:
                    
                    Exception()
                    {
                        this->message = "Unknow exception";
                    }
                    
                    Exception( std::string msg )
                    {
                        this->message = msg;
                    }
                    
                    std::string message;
            };
            
            AutoPointer( void )
            {
                this->_ptr         = NULL;
                this->_retainCount = 0;
            }
            
            AutoPointer( T * ptr )
            {
                this->_ptr         = ptr;
                this->_retainCount = 0;
                
                if( this->_ptr != NULL )
                {
                    this->_retainCount++;
                    
                    CPPARC::retain( this->_ptr );
                }
            }
            
            AutoPointer( const AutoPointer< T > & arp )
            {
                this->_ptr         = arp._ptr;
                this->_retainCount = arp._retainCount;
                
                if( this->_ptr != NULL )
                {
                    this->_retainCount++;
                    
                    CPPARC::retain( this->_ptr );
                }
            }
            
            ~AutoPointer( void )
            {
                if( this->_ptr != NULL)
                {
                    this->_retainCount--;
                    
                    CPPARC::release( this->_ptr );
                    
                    if( this->_retainCount == 0 )
                    {
                        CPPARC::release( this->_ptr );
                    }
                }
            }
            
            AutoPointer< T > & operator =( const AutoPointer< T > & arp )
            {
                if( this == &arp )
                {
                    return *( this );
                }
                
                if( this->_ptr == arp._ptr )
                {
                    return *( this );
                }
                
                this->_ptr         = arp._ptr;
                this->_retainCount = arp._retainCount;
                
                if( this->_ptr != NULL )
                {
                    this->_retainCount++;
                    
                    CPPARC::retain( this->_ptr );
                }
                
                return *( this );
            }
            
            void * operator new( std::size_t size )
            {
                ( void )size;
                
                throw CPPARC::AutoPointer< T >::Exception( "CPPARC::AutoPointer class cannot be allocated using new!" );
                
                return NULL;
            }
            
            T & operator *( void )
            {
                return *( this->_ptr );
            }
            
            T * operator ->( void )
            {
                return this->_ptr;
            }
            
        private:
            
            T         * _ptr;
            std::size_t _retainCount;
    };
}

/*******************************************************************************
 * Global namespace
 ******************************************************************************/

#pragma mark -
#pragma mark Global namespace

void * operator new( std::size_t size ) throw( std::bad_alloc );
void * operator new( std::size_t size ) throw( std::bad_alloc )
{
    void * p;
    
    p = CPPARC::allocate( size );
    
    if( p == NULL )
    {
        throw std::bad_alloc();
    }
    
    return p;
}

void * operator new( std::size_t size, const std::nothrow_t & nothrow ) throw();
void * operator new( std::size_t size, const std::nothrow_t & nothrow ) throw()
{
    ( void )nothrow;
    
    return CPPARC::allocate( size );
}

void * operator new[]( std::size_t size ) throw ( std::bad_alloc );
void * operator new[]( std::size_t size ) throw ( std::bad_alloc )
{
    void * p;
    
    p = CPPARC::allocate( size );
    
    if( p == NULL )
    {
        throw std::bad_alloc();
    }
    
    return p;
}

void * operator new[]( std::size_t size, const std::nothrow_t & nothrow ) throw();
void * operator new[]( std::size_t size, const std::nothrow_t & nothrow ) throw()
{
    ( void )nothrow;
    
    return CPPARC::allocate( size );
}

void operator delete( void * ptr ) throw();
void operator delete( void * ptr ) throw()
{
    CPPARC::deallocate( ptr );
}

void operator delete( void * ptr, const std::nothrow_t & nothrow ) throw();
void operator delete( void * ptr, const std::nothrow_t & nothrow ) throw()
{
    ( void )nothrow;
    
    CPPARC::deallocate( ptr );
}

void operator delete[]( void * ptr ) throw();
void operator delete[]( void * ptr ) throw()
{
    CPPARC::deallocate( ptr );
}

void operator delete[]( void * ptr, const std::nothrow_t & nothrow ) throw();
void operator delete[]( void * ptr, const std::nothrow_t & nothrow ) throw()
{
    ( void )nothrow;
    
    CPPARC::deallocate( ptr );
}

/*******************************************************************************
 * Testing
 ******************************************************************************/

#pragma mark -
#pragma mark Testing

class Foo
{
    public:
        
        Foo( void )
        {
            std::cout << "Foo::Constructor" << std::endl;
        }
        
        virtual ~Foo( void )
        {
            std::cout << "Foo::Destructor" << std::endl;
        }
        
        void test( void )
        {
            std::cout << "hello, world" << std::endl;
        }
        
    protected:
        
        int _x;
        int _y;
};

class Bar: public Foo
{
    public:
        
        Bar( void )
        {
            std::cout << "Bar::Constructor" << std::endl;
        }
        
        virtual ~Bar( void )
        {
            std::cout << "Bar::Destructor" << std::endl;
        }
        
    protected:
        
        int _x;
        int _y;
};

CPPARC::AutoPointer< Foo > test( void )
{
    return new Foo();
}

int main( void )
{
    Foo     * f;
    Bar     * b;
    char    * s1;
    char    * s2;
    
    f   = new Foo();
    b   = new Bar();
    s1  = new char;
    s2  = new char[ 5 ];
    
    CPPARC::retain( f );
    CPPARC::release( f );
    CPPARC::release( f );
    CPPARC::release( b );
    CPPARC::release( s1 );
    CPPARC::release( s2 );
    
    CPPARC::AutoPointer< Foo > p1 = new Foo();
    CPPARC::AutoPointer< Foo > p2;
    
    p2 = test();
    
    p1->test();
    p2->test();
    
    ( *( p1 ) ).test();
    ( *( p2 ) ).test();
    
    std::cout << "End of main()" << std::endl;
    
    return 0;
}
